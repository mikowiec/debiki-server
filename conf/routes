# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# In Global.scala, routing is intercepted, and editPost/createPage/etc
# are called, based on the query string (e.g. ?edit=... or ?create-page).

# API calls
# Would be nice to change to <path>?login-simple / ?logout / etcetera,
# so the actual page will be included in the request. Then one would know
# on which page did the user start/end the session. But for now:

# Rare compilation problem tips:
# If there's ever again any impossibly weird error like:
#   [error] /home/kajmagnus/me-dev/debiki/all/debiki-server/conf/routes:14:
#     too many arguments for method apply:
#     (name: String, constraint: String)play.core.DynamicPart in object DynamicPart
#   [error] GET /-/login/:provider  controllers.AppLogin.loginWith(provider, returnToUrl)
# Then, in project/Build.scala, add nonTransitive() to perhaps the play-plugins-mailer
# dependency ? see:
#   https://groups.google.com/forum/?fromgroups=#!topic/play-framework/cVqBvywCs4k

GET   /-/login                  controllers.LoginController.showLoginPage(as: Option[String], to: Option[String])
GET   /-/login-popup            controllers.LoginController.showLoginPopup(mode, returnToUrl)
POST  /-/logout                 controllers.LoginController.logout
POST  /-/send-addr-verif-email-again  controllers.LoginController.sendSiteOwnerAddrVerifEmailAgain

POST  /-/login-guest            controllers.LoginAsGuestController.loginGuest
POST  /-/login-password         controllers.LoginWithPasswordController.login
POST  /-/login-password-create-user controllers.LoginWithPasswordController.handleCreateUserDialog
GET   /-/login-password-confirm-email controllers.LoginWithPasswordController.confirmEmailAddressAndLogin(confirmationEmailId, returnToUrl)
#GET   /-/api/login-openid       controllers.LoginWithOpenIdController.loginGet
#POST  /-/api/login-openid       controllers.LoginWithOpenIdController.loginPost
#GET   /-/api/login-openid-clbk  controllers.LoginWithOpenIdController.loginCallback(returnToUrl)
GET   /-/login-openauth/:provider controllers.LoginWithOpenAuthController.startAuthentication(provider, returnToUrl)
GET   /-/login-auth-callback/:provider  controllers.LoginWithOpenAuthController.finishAuthentication(provider)
GET   /-/login-oauth-then-return/:provider controllers.LoginWithOpenAuthController.loginThenReturnToOriginalSite(provider, returnToOrigin, xsrfToken)
GET   /-/login-oauth-continue           controllers.LoginWithOpenAuthController.continueAtOriginalSite(oauthDetailsCacheKey, xsrfToken)
POST  /-/login-oauth-create-user  controllers.LoginWithOpenAuthController.handleCreateUserDialog

POST  /-/make-impersonate-other-site-url controllers.ImpersonateController.makeImpersonateOtherSiteUrl(siteId, userId: Int)
GET   /-/make-impersonate-other-site-url controllers.ImpersonateController.makeImpersonateOtherSiteUrl(siteId, userId: Int)
GET   /-/impersonate-with-key   controllers.ImpersonateController.impersonateWithKey(key: String)
POST  /-/impersonate            controllers.ImpersonateController.impersonate(userId: Int)
POST  /-/view-as-other          controllers.ImpersonateController.viewAsOther(userId: Int)
POST  /-/stop-impersonating     controllers.ImpersonateController.stopImpersonating

GET   /-/api/logout             controllers.LoginController.logout
POST  /-/api/logout             controllers.LoginController.logout

GET   /-/pubsub/authorize-subscriber/:channelId  io.efdi.server.pubsub.SubscriberController.authorizeSubscriber(channelId)
GET   /-/load-online-users                    io.efdi.server.pubsub.SubscriberController.loadOnlineUsers

GET   /-/embedded-comments      controllers.EmbeddedTopicsController.showTopic
GET   /-/embedded-editor        controllers.EmbeddedTopicsController.showEmbeddedEditor
GET   /-/embedded-comments-help controllers.EmbeddedTopicsController.showSetupInstructions

GET   /-/search                 controllers.SearchController.showSearchPage(q: Option[String])
POST  /-/search                 controllers.SearchController.doSearch

GET   /-/reset-password                  controllers.ResetPasswordController.start
GET   /-/reset-password/specify-email    controllers.ResetPasswordController.showResetPasswordPage
POST  /-/reset-password/specify-email    controllers.ResetPasswordController.handleResetPasswordForm
GET   /-/reset-password/email-sent       controllers.ResetPasswordController.showEmailSentPage(isEmailAddress)
GET   /-/reset-password/choose-password/:resetPasswordEmailId  controllers.ResetPasswordController.showChooseNewPasswordPage(resetPasswordEmailId)
POST  /-/reset-password/choose-password/:resetPasswordEmailId  controllers.ResetPasswordController.handleNewPasswordForm(resetPasswordEmailId)

GET   /-/create-site                        @controllers.CreateSiteController.showPage(isTest = "false")
GET   /-/create-site/website                @controllers.CreateSiteController.showPage(isTest = "false")
GET   /-/create-site/embedded-comments      @controllers.CreateSiteController.showPage(isTest = "false")
GET   /-/create-test-site                   @controllers.CreateSiteController.showPage(isTest = "true")
GET   /-/create-test-site/website           @controllers.CreateSiteController.showPage(isTest = "true")
GET   /-/create-test-site/embedded-comments @controllers.CreateSiteController.showPage(isTest = "true")
POST  /-/create-site                        @controllers.CreateSiteController.createSite

GET   /-/admin                  @controllers.AdminController.redirectToAdminPage
GET   /-/admin/                 @controllers.AdminController.viewAdminPage(whatever = "")
GET   /-/admin/*whatever        @controllers.AdminController.viewAdminPage(whatever)

GET   /-/load-site-settings     controllers.SettingsController.loadSiteSettings
POST  /-/save-site-settings     controllers.SettingsController.saveSiteSettings
POST  /-/change-hostname        controllers.SettingsController.changeHostname
POST  /-/update-extra-hostnames controllers.SettingsController.updateExtraHostnames

GET   /-/terms-of-use           controllers.LegalController.viewTermsOfUsePage
GET   /-/privacy-policy         controllers.LegalController.viewPrivacyPolicyPage
GET   /-/load-special-content   controllers.SpecialContentController.loadContent(rootPageId, contentId)
POST  /-/save-special-content   controllers.SpecialContentController.saveContent

GET   /-/load-review-tasks      controllers.ModerationController.loadReviewTasks
POST  /-/complete-review-task   controllers.ModerationController.completeReviewTask
#POST  /-/approve                controllers.ModerationController.approve
#POST  /-/hide-new-send-pm       controllers.ModerationController.hideNewPostSendPm
#POST  /-/hide-flagged-send-pm   controllers.ModerationController.hideFlaggedPostSendPm
# Rename to something else or merge with /-/delete-post below?
#POST  /-/delete                 controllers.ModerationController.deletePost
#POST  /-/delete-flagged         controllers.ModerationController.deleteFlaggedPost
#POST  /-/clear-flags            controllers.ModerationController.clearFlags
#POST  /-/reject-edits           controllers.ModerationController.rejectEdits

GET   /-/users/                 controllers.UserController.viewUserPage(whatever = "")
GET   /-/users/*whatever        controllers.UserController.viewUserPage(whatever)
GET   /-/load-my-page-data      controllers.UserController.loadMyPageData(pageId)
GET   /-/load-notifications     controllers.UserController.loadNotifications(userId, upToWhenMs)
POST  /-/mark-notf-as-seen      controllers.UserController.markNotificationAsSeen
POST  /-/set-page-notf-level    controllers.UserController.savePageNotfLevel
GET   /-/list-all-users         controllers.UserController.listAllUsers(usernamePrefix)
GET   /-/list-usernames         controllers.UserController.listUsernames(pageId, prefix)
POST  /-/save-user-preferences  controllers.UserController.saveUserPreferences
POST  /-/save-guest             controllers.UserController.saveGuest
GET   /-/list-complete-users    controllers.UserController.listCompleteUsers(whichUsers)
GET   /-/load-user-incl-details controllers.UserController.loadUserInclDetails(who)
POST  /-/approve-reject-user    controllers.UserController.approveRejectUser
POST  /-/set-is-admin-or-moderator controllers.UserController.setIsAdminOrModerator
POST  /-/lock-threat-level      controllers.UserController.lockThreatLevel
POST  /-/unlock-threat-level    controllers.UserController.unlockThreatLevel
POST  /-/suspend-user           controllers.UserController.suspendUser
POST  /-/unsuspend-user         controllers.UserController.unsuspendUser
POST  /-/block-guest            controllers.UserController.blockGuest
POST  /-/unblock-guest          controllers.UserController.unblockGuest
GET   /-/load-author-blocks     controllers.UserController.loadAuthorBlocks(postId: Int)

GET   /-/unsubscribe            controllers.UnsubscriptionController.showForm(emailId)
POST  /-/unsubscribe            controllers.UnsubscriptionController.handleForm(emailId)
GET   /-/unsubscribed           controllers.UnsubscriptionController.showHasBeenUnsubscribed()

GET   /-/load-invites           controllers.InviteController.loadInvites(sentById: Int)
GET   /-/load-all-invites       controllers.InviteController.loadAllInvites
POST  /-/send-invite            controllers.InviteController.sendInvite
GET   /-/accept-invite/:key     controllers.InviteController.acceptInvite(key)

POST  /-/create-forum           controllers.ForumController.createForum
GET   /-/list-topics            controllers.ForumController.listTopics(categoryId: Int)
GET   /-/list-topics-by-user    controllers.ForumController.listTopicsByUser(userId: Int)
GET   /-/list-categories        controllers.ForumController.listCategories(forumId)
GET   /-/list-categories-topics controllers.ForumController.listCategoriesAndTopics(forumId)
POST  /-/save-category          controllers.ForumController.saveCategory
GET   /-/load-category          controllers.ForumController.loadCategory(id)
POST  /-/delete-category        controllers.ForumController.deleteCategory
POST  /-/undelete-category      controllers.ForumController.undeleteCategory

GET   /-/redir-to-about         controllers.ForumController.redirectToAboutPage(categoryId: Option[Int])

POST  /-/create-page            controllers.PageController.createPage
POST  /-/pin-page               controllers.PageController.pinPage
POST  /-/unpin-page             controllers.PageController.unpinPage
POST  /-/cycle-page-done        controllers.PageController.cyclePageDone
POST  /-/toggle-page-closed     controllers.PageController.togglePageClosed
POST  /-/delete-pages           controllers.PageController.deletePages
POST  /-/undelete-pages         controllers.PageController.undeletePages
POST  /-/accept-answer          controllers.PageController.acceptAnswer
POST  /-/unaccept-answer        controllers.PageController.unacceptAnswer
POST  /-/add-users-to-page      controllers.PageController.addUsersToPage
POST  /-/remove-users-from-page controllers.PageController.removeUsersFromPage
POST  /-/join-page              controllers.PageController.joinPage
POST  /-/leave-page             controllers.PageController.leavePage
POST  /-/reply                  controllers.ReplyController.handleReply
POST  /-/chat                   controllers.ReplyController.handleChatMessage
POST  /-/submit-custom-form-as-json-reply controllers.CustomFormController.handleJsonReply
POST  /-/submit-custom-form-as-new-topic  controllers.CustomFormController.handleNewTopic
POST  /-/vote                   controllers.VoteController.handleVotes
POST  /-/flag                   @controllers.Application.flag
GET   /-/load-draft-and-guidelines controllers.EditController.loadDraftAndGuidelines(writingWhat, categoryId: Option[Int], pageRole)
GET   /-/edit                   controllers.EditController.loadCurrentText(pageId, postNr: Int)
POST  /-/edit                   controllers.EditController.edit
POST  /-/edit-title-save-settings controllers.PageTitleSettingsController.editTitleSaveSettings
GET   /-/onebox                 controllers.EditController.onebox(url)
POST  /-/change-post-type       controllers.EditController.changePostType
POST  /-/edit-post-settings     controllers.EditController.editPostSettings
POST  /-/delete-post            controllers.EditController.deletePost
POST  /-/move-post              controllers.EditController.movePost

GET   /-/load-post-revisions    controllers.EditController.loadPostRevisions(postId: Int, revisionNr)

POST  /-/start-private-group-talk controllers.GroupTalkController.sendMessage

POST  /-/upload-public-file     controllers.UploadsController.uploadPublicFile
POST  /-/upload-avatar          controllers.UploadsController.uploadAvatar(userId: Int)
POST  /-/remove-avatar          controllers.UploadsController.removeAvatar
GET   /-/u/*relativePath        controllers.UploadsController.servePublicFile(relativePath)
GET   /-/uploads/public/*relativePath controllers.UploadsController.servePublicFileLong(relativePath)

# Merge with CloseCollapseController into PostController?
# POST  /-/pin-at-position      controllers.PinController.pinAtPosition
POST  /-/hide-post              @controllers.CloseCollapseController.hidePost
POST  /-/collapse-post          @controllers.CloseCollapseController.collapsePost
POST  /-/collapse-tree          @controllers.CloseCollapseController.collapseTree
POST  /-/close-tree             @controllers.CloseCollapseController.closeTree
#POST  /-/reopen-tree            controllers.CloseCollapseController.reopenTree

POST  /-/import-site            controllers.ImportExportController.importSiteJson(deleteOldSite: Option[Boolean])

POST /-/log-browser-errors      @controllers.DebugTestController.logBrowserErrors
GET  /-/metrics                 @controllers.DebugTestController.showMetrics
GET  /-/build-info              @controllers.DebugTestController.showBuildInfo
GET  /-/ping-exception-action   @controllers.DebugTestController.pingExceptionAction
GET  /-/ping-session-action     @controllers.DebugTestController.pingApiAction
GET  /-/ping-cache              @controllers.DebugTestController.pingCache
GET  /-/ping-database-and-cache @controllers.DebugTestController.pingDatabaseAndCache
GET  /-/origin                  @controllers.DebugTestController.origin
GET  /-/are-scripts-ready       @controllers.DebugTestController.areScriptsReady
GET  /-/create-deadlock         @controllers.DebugTestController.createDeadlock
GET  /-/last-e2e-test-email     @controllers.DebugTestController.showLastE2eTestEmailSent(siteId, sentTo)
GET   /-/site/:siteId/*file     controllers.SiteAssetBundlesController.customAsset(siteId, file)
GET   /-/site/*file             controllers.SiteAssetBundlesController.at(file)

GET   /-/tags                   controllers.TagsController.redirect
GET   /-/tags/                  controllers.TagsController.tagsApp(clientRoute = "")
GET   /-/tags/*clientRoute      controllers.TagsController.tagsApp(clientRoute)
GET   /-/load-all-tags          controllers.TagsController.loadAllTags
GET   /-/load-tags-and-stats    controllers.TagsController.loadTagsAndStats
POST  /-/set-tag-notf-level     controllers.TagsController.setTagNotfLevel
GET   /-/load-my-tag-notf-levels controllers.TagsController.loadMyTagNotfLevels
POST  /-/add-remove-tags        controllers.TagsController.addRemoveTags

GET   /-/sa                      controllers.SuperAdminController.redirect
GET   /-/super-admin             controllers.SuperAdminController.redirect
GET   /-/super-admin/            controllers.SuperAdminController.redirect
GET   /-/superadmin              controllers.SuperAdminController.redirect
GET   /-/superadmin/             controllers.SuperAdminController.superAdminApp(clientRoute = "")
GET   /-/superadmin/*clientRoute controllers.SuperAdminController.superAdminApp(clientRoute)
GET   /-/list-sites              controllers.SuperAdminController.listSites
POST  /-/update-sites            controllers.SuperAdminController.updateSites

GET   /-/load-post              controllers.ViewPageController.loadPost(pageId: String, postNr: Int)
GET   /-/list-posts             controllers.ViewPageController.listPosts(authorId: Int)

# Don't change the URL on the next line. The /-/assets/<version-number>/ is
# updated by the deployment script (asset fingerprinting).
GET   /-/assets/179/*file       controllers.Assets.at(path = "/public/res", file)
GET   /robots.txt               controllers.Assets.at(path = "/public", file = "robots.txt")
GET   /-/debiki-embedded-comments.js   controllers.Assets.at(path = "/public/res", file = "embedded-comments.js")
GET   /-/debiki-embedded-comments.css  controllers.Assets.at(path = "/public/res", file = "debiki-embedded-comments.css")
GET   /-/*file                  controllers.Assets.at(path = "/public", file)
GET   /favicon.ico              controllers.Assets.at(path = "/public/img", file = "debiki-favicon.ico")

POST  /-/mark-as-seen           controllers.ViewPageController.markPageAsSeen(pageId)
GET   /*path                    controllers.ViewPageController.viewPage(path)
GET   /                         controllers.ViewPageController.viewPage(path = "")
