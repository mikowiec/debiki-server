version: '2'
services:
  web:
    mem_limit: 200M
    build: docker/web/
    image: debiki/ed-web
    command: nginx
    volumes:
      - ./docker/data/uploads/:/opt/ed/uploads/:ro
      - ./docker/data/letsencrypt/:/etc/letsencrypt/:ro
      # Mount the Lua scripts, rather than relying on Docker's COPY, so Nginx can
      # auto reload them after edits.
      - ./docker/web/ed-lua/:/opt/ed/lua/:ro
    ports:
      # Don't expose port 81 (for publishing WebSocket events)  — it should be reachable only
      # from inside the Docker network.
      - '80:80'
      - '443:443'
    depends_on:
      - app
    environment:
      CDN_PULL_KEY: "public"

  app:
    mem_limit: 2600M
    build: docker/app-dev/
    # image debiki/ed-app instead created and tagged by docker/build-app-prod.sh.
    stdin_open: true  # otherwise Play exits
    volumes:
      - ./:/opt/ed/app/
      - ./docker/data/uploads/:/opt/ed/uploads/
      # Without this it takes forever to start because sbt would always download all dependencies.
      - ~/.ivy2/:/home/owner/.ivy2/
      - ~/.sbt/:/home/owner/.sbt/
    ports:
      - '9000:9000' # Play's HTTP listen port.
      - '9999:9999' # Java debugger port
      - '3333:3333' # JMX
    links:
      - cache
      - search
      - rdb
    environment:
      PLAY_HEAP_MEMORY_MB: 1700
      HOSTNAME: "localhost"
      CREATE_SITE_HOSTNAME: "localhost"
      BECOME_OWNER_EMAIL_ADDRESS: "admin@example.com"
      E2E_TEST_PASSWORD: "public"
      FORBIDDEN_PASSWORD: "public"

  cache:
    mem_limit: 50M
    image: redis:3.0.7-alpine
    volumes:
      - ./docker/data/cache/:/data/
    ports:
      - '6379:6379'

  search:
    # If too low, the 'search' container will suddenly exit with code 137. No error message
    # will get logged — instead it just exits, suddenly. Why? OOM-killed? In Docker? Hmm.
    mem_limit: 800M
    image: elasticsearch:5.0.0-alpha4
    volumes:
      - ./docker/search/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - ./docker/data/search/:/usr/share/elasticsearch/data/
    ports:
      - '9200:9200'
      - '9300:9300'
    environment:
      ES_JAVA_OPTS: '-Xms500m -Xmx500m'

  rdb:
    mem_limit: 200M
    build: docker/rdb/
    image: debiki/ed-rdb
    volumes:
      - ./docker/data/rdb/:/var/lib/postgresql/data/
      - ./docker/data/rdb-logs/:/var/log/postgresql/
    ports:
      - '5432:5432'
    environment:
      POSTGRES_PASSWORD: 'public'
      PEER_HOST: 'rdb2'
      PEER_PORT: '5432'
      PEER_PASSWORD: 'public2'
      CREATE_TEST_USER: 'yes'

  # An extra database, so you can experiment with Postgres replication and failover.
  # You don't need to start it.
  #rdb2:
  #  mem_limit: 30M
  #  build: docker/rdb/
  #  volumes:
  #    - ./docker/data/rdb2/:/var/lib/postgresql/data/
  #  environment:
  #    POSTGRES_PASSWORD: 'public2'
  #    PEER_HOST: 'rdb'
  #    PEER_PORT: '5432'
  #    PEER_PASSWORD: 'public'

  gulp:
    mem_limit: 700M
    build: docker/gulp/
    volumes:
      - ./:/opt/debiki/server/
    ports:
      # This is for debugging tests running in Node.js in this container, and started
      # via `node --debug-brk --inspect=9229`. [8EA02R4]
      - '9229:9229'
    links:
      # Links for security tests, so the Typescript test code running in this Node.js container can
      # send HTTP request to the ED tech stack, if it's running in Docker-Compose on localhost.
      # See tests/security/settings.ts [7PKW4R2]
      - web
      - web:test-site-1.web
      - web:test-site-2.web
      - web:test-site-3.web


# vim: et ts=2 sw=2
